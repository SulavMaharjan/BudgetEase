@page "/addDebt"

@using BudgetEasee.Models
@using BudgetEasee.Services
@inject DebtService DebtService
@inject NavigationManager NavigationManager

<h3 class="text-center mb-4 text-primary">Add Debt</h3>

@if (debtFailed)
{
    <div class="alert alert-danger text-center" role="alert">
        There was an error adding the debt. Please try again.
    </div>
}

<div class="card shadow-lg p-4 mb-4">
    <form @onsubmit="HandleAddDebt" class="mb-4">
        <div class="mb-3">
            <label class="form-label">Source of Debt</label>
            <input class="form-control form-control-lg" @bind="Source" placeholder="Enter the source of debt" required />
        </div>
        <div class="mb-3">
            <label class="form-label">Amount</label>
            <input type="number" class="form-control form-control-lg" @bind="Amount" step="0.01" placeholder="Enter the amount" required />
        </div>
        <div class="mb-3">
            <label class="form-label">Debt Due Date</label>
            <input type="date" class="form-control form-control-lg" @bind="DebtDueDate" required />
        </div>
        <div class="text-center">
            <button type="submit" class="btn btn-primary btn-lg">Add Debt</button>
        </div>
    </form>
</div>

<h4 class="text-center text-info">Debt History</h4>

@if (debts == null)
{
    <p class="text-center">Loading debt history...</p>
}
else if (debts.Count == 0)
{
    <p class="text-center">No debts found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover">
            <thead class="table-light">
                <tr>
                    <th>Source of Debt</th>
                    <th>Amount</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in debts)
                {
                    <tr>
                        <td>@debt.Source</td>
                        <td>@debt.Amount</td>
                        <td>@debt.DebtDueDate.ToString("yyyy-MM-dd")</td>
                        <td>
                            <span class="badge @GetDebtStatusBadge(debt.Status)">
                                @debt.Status
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm me-2" @onclick="() => HandleDeleteDebt(debt.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                            <button class="btn btn-success btn-sm" @onclick="() => HandleClearDebt(debt.Id)" disabled="@IsDebtCleared(debt)">
                                <i class="bi bi-check"></i> Clear
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private string Source { get; set; } = string.Empty;
    private decimal Amount { get; set; } = 0;
    private DateTime DebtDueDate { get; set; } = DateTime.Now;
    private bool debtFailed;
    private List<Debt> debts = new List<Debt>(); // Initialize with an empty list

    protected override async Task OnInitializedAsync()
    {
        await LoadDebtHistory();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDebtHistory();
        }
    }

    private async Task HandleAddDebt()
    {
        try
        {
            var success = await DebtService.AddDebtAsync(Source, Amount, DebtDueDate);
            if (!success)
            {
                debtFailed = true;
            }
            else
            {
                debtFailed = false;
                // After adding debt, trigger a reload of the debt history
                await LoadDebtHistory();
            }
        }
        catch (Exception ex)
        {
            debtFailed = true;
            Console.Error.WriteLine($"Error adding debt: {ex.Message}");  // Log the error for debugging
        }
    }

    private async Task HandleDeleteDebt(int debtId)
    {
        try
        {
            var success = await DebtService.DeleteDebtAsync(debtId);
            if (success)
            {
                // Reload the debt history after deletion
                await LoadDebtHistory();
            }
            else
            {
                Console.Error.WriteLine("Failed to delete the debt.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting debt: {ex.Message}");  // Log the error for debugging
        }
    }

    private async Task HandleClearDebt(int debtId)
    {
        try
        {
            var success = await DebtService.UpdateDebtStatusAsync(debtId, "Cleared");
            if (success)
            {
                // Reload the debt history after updating the status
                await LoadDebtHistory();
            }
            else
            {
                Console.Error.WriteLine("Failed to clear the debt.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error clearing debt: {ex.Message}");
        }
    }

    private bool IsDebtCleared(Debt debt)
    {
        return debt.Status == "Cleared";
    }

    private async Task LoadDebtHistory()
    {
        // Get the debt history from the service and update the local list
        debts = await DebtService.GetDebtsAsync();
        StateHasChanged(); // Refresh the page to reflect updated data
    }

    private string GetDebtStatusBadge(string status)
    {
        return status switch
        {
            "Cleared" => "bg-success text-white",
            "Pending" => "bg-warning text-dark",
            _ => "bg-secondary text-white"
        };
    }
}
