@page "/transactionHistory"

@using BudgetEasee.Models
@using BudgetEasee.Services
@inject TransactionService TransactionService
@inject NavigationManager NavigationManager

<h3 class="text-center mb-4 text-primary">Transaction History</h3>

<div class="mb-3 text-center">
    <button class="btn btn-success">
        <a href="/transaction" class="text-light text-decoration-none">Add Transaction</a>
    </button>
</div>

@if (transactions == null)
{
    <p class="text-center text-info">Loading transactions...</p>
}
else if (transactions.Count == 0)
{
    <p class="text-center text-warning">No transactions found.</p>
}
else
{
    <div class="mb-4 d-flex justify-content-between">
        <input type="text" class="form-control w-50" placeholder="Search by Source or Amount" @bind="searchText" />
        <select class="form-select w-25" @bind="selectedTag">
            <option value="">Filter by Tag</option>
            @foreach (var tag in availableTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
    </div>

    <table class="table table-bordered table-striped table-hover">
        <thead class="table-light">
            <tr class="text-primary">
                <th>Source</th>
                <th>Amount</th>
                <th>Transaction Type</th>
                <th>Tag</th>
                <th>Remarks</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr class="table-row">
                    <td>@transaction.Source</td>
                    <td class="text-success">@transaction.Amount</td>
                    <td class="@GetTransactionTypeClass(transaction.TransactionType)">@transaction.TransactionType</td>
                    <td>@transaction.Tag</td>
                    <td>@transaction.Remarks</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="text-center">
    <button class="btn btn-primary" @onclick="LoadTransactions">Refresh Transactions</button>
</div>

@code {
    private List<BudgetEasee.Models.Transaction> transactions;
    private List<BudgetEasee.Models.Transaction> FilteredTransactions => transactions
        .Where(t => (string.IsNullOrWhiteSpace(searchText) || t.Source.Contains(searchText, StringComparison.OrdinalIgnoreCase) || t.Amount.ToString().Contains(searchText))
                    && (string.IsNullOrWhiteSpace(selectedTag) || t.Tag == selectedTag))
        .ToList();

    private string searchText = string.Empty;
    private string selectedTag = string.Empty;
    private List<string> availableTags = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
        await LoadTags(); // Load available tags
    }

    private async Task LoadTransactions()
    {
        transactions = await TransactionService.GetTransactionsAsync();
        StateHasChanged();
    }

    private async Task LoadTags()
    {
        availableTags = await TransactionService.GetAvailableTagsAsync(); // Add this method to fetch tags
    }

    private async Task DeleteTransaction(int transactionId)
    {
        bool isDeleted = await TransactionService.DeleteTransactionAsync(transactionId);

        if (isDeleted)
        {
            transactions = transactions.Where(t => t.Id != transactionId).ToList();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error deleting transaction.");
        }
    }

    private async Task FilterByTag(ChangeEventArgs e)
    {
        selectedTag = e.Value?.ToString();
        FilteredTransactions.Clear(); // Clear and refresh the filtered list
        await Task.CompletedTask;
    }

    private string GetTransactionTypeClass(TransactionType transactionType)
    {
        return transactionType == TransactionType.Credit ? "text-success" : "text-danger";
    }
}
